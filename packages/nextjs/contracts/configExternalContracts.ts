/**
 * This file is autogenerated by Scaffold-Stark.
 * You should not edit it manually or your changes might be overwritten.
 */

const configExternalContracts = {
  sepolia: {
    RandomContract: {
      address:
        "0x02da9c98a2e5b60ea441c14371d062395cfb3864f1b6fead23ce8bc47b3d2ecd",
      classHash:
        "0x7ddaaa4b8dc38c67481ae52968381f17b895f685cd976e10ab22be1572f72dd",
      abi: [
        {
          interface_name: "random::interface::IRandom",
          name: "IRandomImpl",
          type: "impl",
        },
        {
          name: "core::bool",
          type: "enum",
          variants: [
            { name: "False", type: "()" },
            { name: "True", type: "()" },
          ],
        },
        {
          members: [
            { name: "low", type: "core::integer::u128" },
            { name: "high", type: "core::integer::u128" },
          ],
          name: "core::integer::u256",
          type: "struct",
        },
        {
          items: [
            {
              inputs: [{ name: "seed", type: "core::felt252" }],
              name: "felt252",
              outputs: [{ type: "core::felt252" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [{ name: "seed", type: "core::felt252" }],
              name: "bool",
              outputs: [{ type: "core::bool" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [{ name: "seed", type: "core::felt252" }],
              name: "u8",
              outputs: [{ type: "core::integer::u8" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [{ name: "seed", type: "core::felt252" }],
              name: "u16",
              outputs: [{ type: "core::integer::u16" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [{ name: "seed", type: "core::felt252" }],
              name: "u32",
              outputs: [{ type: "core::integer::u32" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [{ name: "seed", type: "core::felt252" }],
              name: "u64",
              outputs: [{ type: "core::integer::u64" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [{ name: "seed", type: "core::felt252" }],
              name: "u128",
              outputs: [{ type: "core::integer::u128" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [{ name: "seed", type: "core::felt252" }],
              name: "u256",
              outputs: [{ type: "core::integer::u256" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [
                { name: "seed", type: "core::felt252" },
                { name: "cap", type: "core::integer::u8" },
              ],
              name: "u8_capped",
              outputs: [{ type: "core::integer::u8" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [
                { name: "seed", type: "core::felt252" },
                { name: "cap", type: "core::integer::u16" },
              ],
              name: "u16_capped",
              outputs: [{ type: "core::integer::u16" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [
                { name: "seed", type: "core::felt252" },
                { name: "cap", type: "core::integer::u32" },
              ],
              name: "u32_capped",
              outputs: [{ type: "core::integer::u32" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [
                { name: "seed", type: "core::felt252" },
                { name: "cap", type: "core::integer::u64" },
              ],
              name: "u64_capped",
              outputs: [{ type: "core::integer::u64" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [
                { name: "seed", type: "core::felt252" },
                { name: "cap", type: "core::integer::u128" },
              ],
              name: "u128_capped",
              outputs: [{ type: "core::integer::u128" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [
                { name: "seed", type: "core::felt252" },
                { name: "cap", type: "core::integer::u256" },
              ],
              name: "u256_capped",
              outputs: [{ type: "core::integer::u256" }],
              state_mutability: "external",
              type: "function",
            },
            {
              inputs: [{ name: "salt", type: "core::felt252" }],
              name: "salt",
              outputs: [],
              state_mutability: "external",
              type: "function",
            },
          ],
          name: "random::interface::IRandom",
          type: "interface",
        },
        {
          kind: "enum",
          name: "random::contract::arcade_blobert_actions::Event",
          type: "event",
          variants: [],
        },
      ],
    },
    CardCollection: {
      address:
        "0x036f9b45bdc1c82cb874d71ac95e42a4eab89063e0f2f7adc8906a20bdc6cc8c",
      classHash:
        "0x7b2323590bdef4d4cd25e081eff3902a819b4798bd596dc9e5c62cdce688b9d",
      abi: [
        {
          type: "function",
          name: "pause",
          inputs: [],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "function",
          name: "unpause",
          inputs: [],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "struct",
          name: "core::integer::u256",
          members: [
            { name: "low", type: "core::integer::u128" },
            { name: "high", type: "core::integer::u128" },
          ],
        },
        {
          type: "function",
          name: "burn",
          inputs: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
            },
            { name: "token_id", type: "core::integer::u256" },
            { name: "value", type: "core::integer::u256" },
          ],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "struct",
          name: "core::array::Span::<core::integer::u256>",
          members: [
            {
              name: "snapshot",
              type: "@core::array::Array::<core::integer::u256>",
            },
          ],
        },
        {
          type: "function",
          name: "batch_burn",
          inputs: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "token_ids",
              type: "core::array::Span::<core::integer::u256>",
            },
            {
              name: "values",
              type: "core::array::Span::<core::integer::u256>",
            },
          ],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "function",
          name: "batchBurn",
          inputs: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "tokenIds",
              type: "core::array::Span::<core::integer::u256>",
            },
            {
              name: "values",
              type: "core::array::Span::<core::integer::u256>",
            },
          ],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
            },
            { name: "token_id", type: "core::integer::u256" },
            { name: "value", type: "core::integer::u256" },
          ],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "function",
          name: "batch_mint",
          inputs: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "token_ids",
              type: "core::array::Span::<core::integer::u256>",
            },
            {
              name: "values",
              type: "core::array::Span::<core::integer::u256>",
            },
          ],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "function",
          name: "batchMint",
          inputs: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "tokenIds",
              type: "core::array::Span::<core::integer::u256>",
            },
            {
              name: "values",
              type: "core::array::Span::<core::integer::u256>",
            },
          ],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "struct",
          name: "core::byte_array::ByteArray",
          members: [
            {
              name: "data",
              type: "core::array::Array::<core::bytes_31::bytes31>",
            },
            { name: "pending_word", type: "core::felt252" },
            { name: "pending_word_len", type: "core::integer::u32" },
          ],
        },
        {
          type: "function",
          name: "set_base_uri",
          inputs: [{ name: "base_uri", type: "core::byte_array::ByteArray" }],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "function",
          name: "setBaseUri",
          inputs: [{ name: "baseUri", type: "core::byte_array::ByteArray" }],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "enum",
          name: "core::bool",
          variants: [
            { name: "False", type: "()" },
            { name: "True", type: "()" },
          ],
        },
        {
          type: "function",
          name: "set_allowed_caller",
          inputs: [
            {
              name: "contract",
              type: "core::starknet::contract_address::ContractAddress",
            },
            { name: "is_allowed", type: "core::bool" },
          ],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "function",
          name: "setAllowedCaller",
          inputs: [
            {
              name: "contract",
              type: "core::starknet::contract_address::ContractAddress",
            },
            { name: "isAllowed", type: "core::bool" },
          ],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "function",
          name: "token_uri",
          inputs: [{ name: "token_id", type: "core::integer::u256" }],
          outputs: [{ type: "core::byte_array::ByteArray" }],
          state_mutability: "view",
        },
        {
          type: "function",
          name: "tokenURI",
          inputs: [{ name: "tokenId", type: "core::integer::u256" }],
          outputs: [{ type: "core::byte_array::ByteArray" }],
          state_mutability: "view",
        },
        {
          type: "impl",
          name: "UpgradeableImpl",
          interface_name: "openzeppelin_upgrades::interface::IUpgradeable",
        },
        {
          type: "interface",
          name: "openzeppelin_upgrades::interface::IUpgradeable",
          items: [
            {
              type: "function",
              name: "upgrade",
              inputs: [
                {
                  name: "new_class_hash",
                  type: "core::starknet::class_hash::ClassHash",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "impl",
          name: "ERC1155MixinImpl",
          interface_name: "openzeppelin_token::erc1155::interface::ERC1155ABI",
        },
        {
          type: "struct",
          name: "core::array::Span::<core::starknet::contract_address::ContractAddress>",
          members: [
            {
              name: "snapshot",
              type: "@core::array::Array::<core::starknet::contract_address::ContractAddress>",
            },
          ],
        },
        {
          type: "struct",
          name: "core::array::Span::<core::felt252>",
          members: [
            { name: "snapshot", type: "@core::array::Array::<core::felt252>" },
          ],
        },
        {
          type: "interface",
          name: "openzeppelin_token::erc1155::interface::ERC1155ABI",
          items: [
            {
              type: "function",
              name: "balance_of",
              inputs: [
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                { name: "token_id", type: "core::integer::u256" },
              ],
              outputs: [{ type: "core::integer::u256" }],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "balance_of_batch",
              inputs: [
                {
                  name: "accounts",
                  type: "core::array::Span::<core::starknet::contract_address::ContractAddress>",
                },
                {
                  name: "token_ids",
                  type: "core::array::Span::<core::integer::u256>",
                },
              ],
              outputs: [{ type: "core::array::Span::<core::integer::u256>" }],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "safe_transfer_from",
              inputs: [
                {
                  name: "from",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "to",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                { name: "token_id", type: "core::integer::u256" },
                { name: "value", type: "core::integer::u256" },
                { name: "data", type: "core::array::Span::<core::felt252>" },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "safe_batch_transfer_from",
              inputs: [
                {
                  name: "from",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "to",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "token_ids",
                  type: "core::array::Span::<core::integer::u256>",
                },
                {
                  name: "values",
                  type: "core::array::Span::<core::integer::u256>",
                },
                { name: "data", type: "core::array::Span::<core::felt252>" },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "is_approved_for_all",
              inputs: [
                {
                  name: "owner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "operator",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [{ type: "core::bool" }],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "set_approval_for_all",
              inputs: [
                {
                  name: "operator",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                { name: "approved", type: "core::bool" },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "supports_interface",
              inputs: [{ name: "interface_id", type: "core::felt252" }],
              outputs: [{ type: "core::bool" }],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "uri",
              inputs: [{ name: "token_id", type: "core::integer::u256" }],
              outputs: [{ type: "core::byte_array::ByteArray" }],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "balanceOf",
              inputs: [
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                { name: "tokenId", type: "core::integer::u256" },
              ],
              outputs: [{ type: "core::integer::u256" }],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "balanceOfBatch",
              inputs: [
                {
                  name: "accounts",
                  type: "core::array::Span::<core::starknet::contract_address::ContractAddress>",
                },
                {
                  name: "tokenIds",
                  type: "core::array::Span::<core::integer::u256>",
                },
              ],
              outputs: [{ type: "core::array::Span::<core::integer::u256>" }],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "safeTransferFrom",
              inputs: [
                {
                  name: "from",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "to",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                { name: "tokenId", type: "core::integer::u256" },
                { name: "value", type: "core::integer::u256" },
                { name: "data", type: "core::array::Span::<core::felt252>" },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "safeBatchTransferFrom",
              inputs: [
                {
                  name: "from",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "to",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "tokenIds",
                  type: "core::array::Span::<core::integer::u256>",
                },
                {
                  name: "values",
                  type: "core::array::Span::<core::integer::u256>",
                },
                { name: "data", type: "core::array::Span::<core::felt252>" },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "isApprovedForAll",
              inputs: [
                {
                  name: "owner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "operator",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [{ type: "core::bool" }],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "setApprovalForAll",
              inputs: [
                {
                  name: "operator",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                { name: "approved", type: "core::bool" },
              ],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "impl",
          name: "PausableImpl",
          interface_name: "openzeppelin_security::interface::IPausable",
        },
        {
          type: "interface",
          name: "openzeppelin_security::interface::IPausable",
          items: [
            {
              type: "function",
              name: "is_paused",
              inputs: [],
              outputs: [{ type: "core::bool" }],
              state_mutability: "view",
            },
          ],
        },
        {
          type: "impl",
          name: "OwnableMixinImpl",
          interface_name: "openzeppelin_access::ownable::interface::OwnableABI",
        },
        {
          type: "interface",
          name: "openzeppelin_access::ownable::interface::OwnableABI",
          items: [
            {
              type: "function",
              name: "owner",
              inputs: [],
              outputs: [
                { type: "core::starknet::contract_address::ContractAddress" },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "transfer_ownership",
              inputs: [
                {
                  name: "new_owner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "renounce_ownership",
              inputs: [],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "transferOwnership",
              inputs: [
                {
                  name: "newOwner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "renounceOwnership",
              inputs: [],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "constructor",
          name: "constructor",
          inputs: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "card_factory",
              type: "core::starknet::contract_address::ContractAddress",
            },
            { name: "base_uri", type: "core::byte_array::ByteArray" },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc1155::erc1155::ERC1155Component::TransferSingle",
          kind: "struct",
          members: [
            {
              name: "operator",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "from",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "to",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            { name: "id", type: "core::integer::u256", kind: "data" },
            { name: "value", type: "core::integer::u256", kind: "data" },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc1155::erc1155::ERC1155Component::TransferBatch",
          kind: "struct",
          members: [
            {
              name: "operator",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "from",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "to",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "ids",
              type: "core::array::Span::<core::integer::u256>",
              kind: "data",
            },
            {
              name: "values",
              type: "core::array::Span::<core::integer::u256>",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc1155::erc1155::ERC1155Component::ApprovalForAll",
          kind: "struct",
          members: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "operator",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            { name: "approved", type: "core::bool", kind: "data" },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc1155::erc1155::ERC1155Component::URI",
          kind: "struct",
          members: [
            {
              name: "value",
              type: "core::byte_array::ByteArray",
              kind: "data",
            },
            { name: "id", type: "core::integer::u256", kind: "key" },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc1155::erc1155::ERC1155Component::Event",
          kind: "enum",
          variants: [
            {
              name: "TransferSingle",
              type: "openzeppelin_token::erc1155::erc1155::ERC1155Component::TransferSingle",
              kind: "nested",
            },
            {
              name: "TransferBatch",
              type: "openzeppelin_token::erc1155::erc1155::ERC1155Component::TransferBatch",
              kind: "nested",
            },
            {
              name: "ApprovalForAll",
              type: "openzeppelin_token::erc1155::erc1155::ERC1155Component::ApprovalForAll",
              kind: "nested",
            },
            {
              name: "URI",
              type: "openzeppelin_token::erc1155::erc1155::ERC1155Component::URI",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_introspection::src5::SRC5Component::Event",
          kind: "enum",
          variants: [],
        },
        {
          type: "event",
          name: "openzeppelin_security::pausable::PausableComponent::Paused",
          kind: "struct",
          members: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_security::pausable::PausableComponent::Unpaused",
          kind: "struct",
          members: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_security::pausable::PausableComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "Paused",
              type: "openzeppelin_security::pausable::PausableComponent::Paused",
              kind: "nested",
            },
            {
              name: "Unpaused",
              type: "openzeppelin_security::pausable::PausableComponent::Unpaused",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferred",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "OwnershipTransferred",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferred",
              kind: "nested",
            },
            {
              name: "OwnershipTransferStarted",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Upgraded",
          kind: "struct",
          members: [
            {
              name: "class_hash",
              type: "core::starknet::class_hash::ClassHash",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "Upgraded",
              type: "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Upgraded",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::CardCollection::CardCollection::Event",
          kind: "enum",
          variants: [
            {
              name: "ERC1155Event",
              type: "openzeppelin_token::erc1155::erc1155::ERC1155Component::Event",
              kind: "flat",
            },
            {
              name: "SRC5Event",
              type: "openzeppelin_introspection::src5::SRC5Component::Event",
              kind: "flat",
            },
            {
              name: "PausableEvent",
              type: "openzeppelin_security::pausable::PausableComponent::Event",
              kind: "flat",
            },
            {
              name: "OwnableEvent",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::Event",
              kind: "flat",
            },
            {
              name: "UpgradeableEvent",
              type: "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Event",
              kind: "flat",
            },
          ],
        },
      ],
    },
  },
} as const;

export default configExternalContracts;
